/*
 * Harness feature flag service client apis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using io.harness.ff_dotnet_client_sdk.openapi.Client;
using io.harness.ff_dotnet_client_sdk.openapi.Model;

namespace io.harness.ff_dotnet_client_sdk.openapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IClientApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Authenticate with the admin server.
        /// </summary>
        /// <remarks>
        /// Used to retrieve all target segments for certain account id.
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest"> (optional)</param>
        /// <returns>AuthenticationResponse</returns>
        AuthenticationResponse Authenticate(AuthenticationRequest authenticationRequest = default(AuthenticationRequest));

        /// <summary>
        /// Authenticate with the admin server.
        /// </summary>
        /// <remarks>
        /// Used to retrieve all target segments for certain account id.
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest"> (optional)</param>
        /// <returns>ApiResponse of AuthenticationResponse</returns>
        ApiResponse<AuthenticationResponse> AuthenticateWithHttpInfo(AuthenticationRequest authenticationRequest = default(AuthenticationRequest));
        /// <summary>
        /// Retrieve all segments.
        /// </summary>
        /// <remarks>
        /// Used to retrieve all segments for certain account id.
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>List&lt;Segment&gt;</returns>
        List<Segment> GetAllSegments(string environmentUUID, string cluster = default(string));

        /// <summary>
        /// Retrieve all segments.
        /// </summary>
        /// <remarks>
        /// Used to retrieve all segments for certain account id.
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of List&lt;Segment&gt;</returns>
        ApiResponse<List<Segment>> GetAllSegmentsWithHttpInfo(string environmentUUID, string cluster = default(string));
        /// <summary>
        /// Get feature evaluations for target
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="feature">Unique identifier for the flag object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>Evaluation</returns>
        Evaluation GetEvaluationByIdentifier(string environmentUUID, string feature, string target, string cluster = default(string));

        /// <summary>
        /// Get feature evaluations for target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="feature">Unique identifier for the flag object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of Evaluation</returns>
        ApiResponse<Evaluation> GetEvaluationByIdentifierWithHttpInfo(string environmentUUID, string feature, string target, string cluster = default(string));
        /// <summary>
        /// Get feature evaluations for target
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>List&lt;Evaluation&gt;</returns>
        List<Evaluation> GetEvaluations(string environmentUUID, string target, string cluster = default(string));

        /// <summary>
        /// Get feature evaluations for target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of List&lt;Evaluation&gt;</returns>
        ApiResponse<List<Evaluation>> GetEvaluationsWithHttpInfo(string environmentUUID, string target, string cluster = default(string));
        /// <summary>
        /// Get all feature flags activations
        /// </summary>
        /// <remarks>
        /// All feature flags with activations in project environment
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>List&lt;FeatureConfig&gt;</returns>
        List<FeatureConfig> GetFeatureConfig(string environmentUUID, string cluster = default(string));

        /// <summary>
        /// Get all feature flags activations
        /// </summary>
        /// <remarks>
        /// All feature flags with activations in project environment
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of List&lt;FeatureConfig&gt;</returns>
        ApiResponse<List<FeatureConfig>> GetFeatureConfigWithHttpInfo(string environmentUUID, string cluster = default(string));
        /// <summary>
        /// Get feature config
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the flag object in the API.</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>FeatureConfig</returns>
        FeatureConfig GetFeatureConfigByIdentifier(string identifier, string environmentUUID, string cluster = default(string));

        /// <summary>
        /// Get feature config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the flag object in the API.</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of FeatureConfig</returns>
        ApiResponse<FeatureConfig> GetFeatureConfigByIdentifierWithHttpInfo(string identifier, string environmentUUID, string cluster = default(string));
        /// <summary>
        /// Retrieve a segment by identifier
        /// </summary>
        /// <remarks>
        /// Used to retrieve a segment for a certain account id by identifier
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the segment object in the API</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>Segment</returns>
        Segment GetSegmentByIdentifier(string identifier, string environmentUUID, string cluster = default(string));

        /// <summary>
        /// Retrieve a segment by identifier
        /// </summary>
        /// <remarks>
        /// Used to retrieve a segment for a certain account id by identifier
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the segment object in the API</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of Segment</returns>
        ApiResponse<Segment> GetSegmentByIdentifierWithHttpInfo(string identifier, string environmentUUID, string cluster = default(string));
        /// <summary>
        /// Stream endpoint.
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey"></param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns></returns>
        void Stream(string aPIKey, string cluster = default(string));

        /// <summary>
        /// Stream endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey"></param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamWithHttpInfo(string aPIKey, string cluster = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IClientApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Authenticate with the admin server.
        /// </summary>
        /// <remarks>
        /// Used to retrieve all target segments for certain account id.
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationResponse</returns>
        System.Threading.Tasks.Task<AuthenticationResponse> AuthenticateAsync(AuthenticationRequest authenticationRequest = default(AuthenticationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authenticate with the admin server.
        /// </summary>
        /// <remarks>
        /// Used to retrieve all target segments for certain account id.
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationResponse>> AuthenticateWithHttpInfoAsync(AuthenticationRequest authenticationRequest = default(AuthenticationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all segments.
        /// </summary>
        /// <remarks>
        /// Used to retrieve all segments for certain account id.
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Segment&gt;</returns>
        System.Threading.Tasks.Task<List<Segment>> GetAllSegmentsAsync(string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all segments.
        /// </summary>
        /// <remarks>
        /// Used to retrieve all segments for certain account id.
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Segment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Segment>>> GetAllSegmentsWithHttpInfoAsync(string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get feature evaluations for target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="feature">Unique identifier for the flag object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Evaluation</returns>
        System.Threading.Tasks.Task<Evaluation> GetEvaluationByIdentifierAsync(string environmentUUID, string feature, string target, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get feature evaluations for target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="feature">Unique identifier for the flag object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Evaluation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Evaluation>> GetEvaluationByIdentifierWithHttpInfoAsync(string environmentUUID, string feature, string target, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get feature evaluations for target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Evaluation&gt;</returns>
        System.Threading.Tasks.Task<List<Evaluation>> GetEvaluationsAsync(string environmentUUID, string target, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get feature evaluations for target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Evaluation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Evaluation>>> GetEvaluationsWithHttpInfoAsync(string environmentUUID, string target, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all feature flags activations
        /// </summary>
        /// <remarks>
        /// All feature flags with activations in project environment
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FeatureConfig&gt;</returns>
        System.Threading.Tasks.Task<List<FeatureConfig>> GetFeatureConfigAsync(string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all feature flags activations
        /// </summary>
        /// <remarks>
        /// All feature flags with activations in project environment
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FeatureConfig&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FeatureConfig>>> GetFeatureConfigWithHttpInfoAsync(string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get feature config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the flag object in the API.</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureConfig</returns>
        System.Threading.Tasks.Task<FeatureConfig> GetFeatureConfigByIdentifierAsync(string identifier, string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get feature config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the flag object in the API.</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureConfig>> GetFeatureConfigByIdentifierWithHttpInfoAsync(string identifier, string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a segment by identifier
        /// </summary>
        /// <remarks>
        /// Used to retrieve a segment for a certain account id by identifier
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the segment object in the API</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Segment</returns>
        System.Threading.Tasks.Task<Segment> GetSegmentByIdentifierAsync(string identifier, string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a segment by identifier
        /// </summary>
        /// <remarks>
        /// Used to retrieve a segment for a certain account id by identifier
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the segment object in the API</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Segment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Segment>> GetSegmentByIdentifierWithHttpInfoAsync(string identifier, string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stream endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey"></param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamAsync(string aPIKey, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stream endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey"></param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamWithHttpInfoAsync(string aPIKey, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IClientApi : IClientApiSync, IClientApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class ClientApi : IDisposable, IClientApi
    {
        private io.harness.ff_dotnet_client_sdk.openapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ClientApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ClientApi(string basePath)
        {
            this.Configuration = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.MergeConfigurations(
                io.harness.ff_dotnet_client_sdk.openapi.Client.GlobalConfiguration.Instance,
                new io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ClientApi(io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.MergeConfigurations(
                io.harness.ff_dotnet_client_sdk.openapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ClientApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ClientApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.MergeConfigurations(
                io.harness.ff_dotnet_client_sdk.openapi.Client.GlobalConfiguration.Instance,
                new io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ClientApi(HttpClient client, io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.MergeConfigurations(
                io.harness.ff_dotnet_client_sdk.openapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ClientApi(io.harness.ff_dotnet_client_sdk.openapi.Client.ISynchronousClient client, io.harness.ff_dotnet_client_sdk.openapi.Client.IAsynchronousClient asyncClient, io.harness.ff_dotnet_client_sdk.openapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Authenticate with the admin server. Used to retrieve all target segments for certain account id.
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest"> (optional)</param>
        /// <returns>AuthenticationResponse</returns>
        public AuthenticationResponse Authenticate(AuthenticationRequest authenticationRequest = default(AuthenticationRequest))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<AuthenticationResponse> localVarResponse = AuthenticateWithHttpInfo(authenticationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate with the admin server. Used to retrieve all target segments for certain account id.
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest"> (optional)</param>
        /// <returns>ApiResponse of AuthenticationResponse</returns>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<AuthenticationResponse> AuthenticateWithHttpInfo(AuthenticationRequest authenticationRequest = default(AuthenticationRequest))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authenticationRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthenticationResponse>("/client/auth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Authenticate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticate with the admin server. Used to retrieve all target segments for certain account id.
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticationResponse> AuthenticateAsync(AuthenticationRequest authenticationRequest = default(AuthenticationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<AuthenticationResponse> localVarResponse = await AuthenticateWithHttpInfoAsync(authenticationRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate with the admin server. Used to retrieve all target segments for certain account id.
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationResponse)</returns>
        public async System.Threading.Tasks.Task<io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<AuthenticationResponse>> AuthenticateWithHttpInfoAsync(AuthenticationRequest authenticationRequest = default(AuthenticationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authenticationRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthenticationResponse>("/client/auth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Authenticate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all segments. Used to retrieve all segments for certain account id.
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>List&lt;Segment&gt;</returns>
        public List<Segment> GetAllSegments(string environmentUUID, string cluster = default(string))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<List<Segment>> localVarResponse = GetAllSegmentsWithHttpInfo(environmentUUID, cluster);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all segments. Used to retrieve all segments for certain account id.
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of List&lt;Segment&gt;</returns>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<List<Segment>> GetAllSegmentsWithHttpInfo(string environmentUUID, string cluster = default(string))
        {
            // verify the required parameter 'environmentUUID' is set
            if (environmentUUID == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'environmentUUID' when calling ClientApi->GetAllSegments");

            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("environmentUUID", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(environmentUUID)); // path parameter
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Segment>>("/client/env/{environmentUUID}/target-segments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSegments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all segments. Used to retrieve all segments for certain account id.
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Segment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Segment>> GetAllSegmentsAsync(string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<List<Segment>> localVarResponse = await GetAllSegmentsWithHttpInfoAsync(environmentUUID, cluster, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all segments. Used to retrieve all segments for certain account id.
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Segment&gt;)</returns>
        public async System.Threading.Tasks.Task<io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<List<Segment>>> GetAllSegmentsWithHttpInfoAsync(string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'environmentUUID' is set
            if (environmentUUID == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'environmentUUID' when calling ClientApi->GetAllSegments");


            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("environmentUUID", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(environmentUUID)); // path parameter
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Segment>>("/client/env/{environmentUUID}/target-segments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSegments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get feature evaluations for target 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="feature">Unique identifier for the flag object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>Evaluation</returns>
        public Evaluation GetEvaluationByIdentifier(string environmentUUID, string feature, string target, string cluster = default(string))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<Evaluation> localVarResponse = GetEvaluationByIdentifierWithHttpInfo(environmentUUID, feature, target, cluster);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get feature evaluations for target 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="feature">Unique identifier for the flag object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of Evaluation</returns>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<Evaluation> GetEvaluationByIdentifierWithHttpInfo(string environmentUUID, string feature, string target, string cluster = default(string))
        {
            // verify the required parameter 'environmentUUID' is set
            if (environmentUUID == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'environmentUUID' when calling ClientApi->GetEvaluationByIdentifier");

            // verify the required parameter 'feature' is set
            if (feature == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'feature' when calling ClientApi->GetEvaluationByIdentifier");

            // verify the required parameter 'target' is set
            if (target == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'target' when calling ClientApi->GetEvaluationByIdentifier");

            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("environmentUUID", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(environmentUUID)); // path parameter
            localVarRequestOptions.PathParameters.Add("feature", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(feature)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(target)); // path parameter
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Evaluation>("/client/env/{environmentUUID}/target/{target}/evaluations/{feature}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvaluationByIdentifier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get feature evaluations for target 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="feature">Unique identifier for the flag object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Evaluation</returns>
        public async System.Threading.Tasks.Task<Evaluation> GetEvaluationByIdentifierAsync(string environmentUUID, string feature, string target, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<Evaluation> localVarResponse = await GetEvaluationByIdentifierWithHttpInfoAsync(environmentUUID, feature, target, cluster, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get feature evaluations for target 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="feature">Unique identifier for the flag object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Evaluation)</returns>
        public async System.Threading.Tasks.Task<io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<Evaluation>> GetEvaluationByIdentifierWithHttpInfoAsync(string environmentUUID, string feature, string target, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'environmentUUID' is set
            if (environmentUUID == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'environmentUUID' when calling ClientApi->GetEvaluationByIdentifier");

            // verify the required parameter 'feature' is set
            if (feature == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'feature' when calling ClientApi->GetEvaluationByIdentifier");

            // verify the required parameter 'target' is set
            if (target == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'target' when calling ClientApi->GetEvaluationByIdentifier");


            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("environmentUUID", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(environmentUUID)); // path parameter
            localVarRequestOptions.PathParameters.Add("feature", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(feature)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(target)); // path parameter
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Evaluation>("/client/env/{environmentUUID}/target/{target}/evaluations/{feature}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvaluationByIdentifier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get feature evaluations for target 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>List&lt;Evaluation&gt;</returns>
        public List<Evaluation> GetEvaluations(string environmentUUID, string target, string cluster = default(string))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<List<Evaluation>> localVarResponse = GetEvaluationsWithHttpInfo(environmentUUID, target, cluster);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get feature evaluations for target 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of List&lt;Evaluation&gt;</returns>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<List<Evaluation>> GetEvaluationsWithHttpInfo(string environmentUUID, string target, string cluster = default(string))
        {
            // verify the required parameter 'environmentUUID' is set
            if (environmentUUID == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'environmentUUID' when calling ClientApi->GetEvaluations");

            // verify the required parameter 'target' is set
            if (target == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'target' when calling ClientApi->GetEvaluations");

            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("environmentUUID", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(environmentUUID)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(target)); // path parameter
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Evaluation>>("/client/env/{environmentUUID}/target/{target}/evaluations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvaluations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get feature evaluations for target 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Evaluation&gt;</returns>
        public async System.Threading.Tasks.Task<List<Evaluation>> GetEvaluationsAsync(string environmentUUID, string target, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<List<Evaluation>> localVarResponse = await GetEvaluationsWithHttpInfoAsync(environmentUUID, target, cluster, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get feature evaluations for target 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="target">Unique identifier for the target object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Evaluation&gt;)</returns>
        public async System.Threading.Tasks.Task<io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<List<Evaluation>>> GetEvaluationsWithHttpInfoAsync(string environmentUUID, string target, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'environmentUUID' is set
            if (environmentUUID == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'environmentUUID' when calling ClientApi->GetEvaluations");

            // verify the required parameter 'target' is set
            if (target == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'target' when calling ClientApi->GetEvaluations");


            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("environmentUUID", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(environmentUUID)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(target)); // path parameter
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Evaluation>>("/client/env/{environmentUUID}/target/{target}/evaluations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvaluations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all feature flags activations All feature flags with activations in project environment
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>List&lt;FeatureConfig&gt;</returns>
        public List<FeatureConfig> GetFeatureConfig(string environmentUUID, string cluster = default(string))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<List<FeatureConfig>> localVarResponse = GetFeatureConfigWithHttpInfo(environmentUUID, cluster);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all feature flags activations All feature flags with activations in project environment
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of List&lt;FeatureConfig&gt;</returns>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<List<FeatureConfig>> GetFeatureConfigWithHttpInfo(string environmentUUID, string cluster = default(string))
        {
            // verify the required parameter 'environmentUUID' is set
            if (environmentUUID == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'environmentUUID' when calling ClientApi->GetFeatureConfig");

            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("environmentUUID", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(environmentUUID)); // path parameter
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FeatureConfig>>("/client/env/{environmentUUID}/feature-configs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeatureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all feature flags activations All feature flags with activations in project environment
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FeatureConfig&gt;</returns>
        public async System.Threading.Tasks.Task<List<FeatureConfig>> GetFeatureConfigAsync(string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<List<FeatureConfig>> localVarResponse = await GetFeatureConfigWithHttpInfoAsync(environmentUUID, cluster, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all feature flags activations All feature flags with activations in project environment
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FeatureConfig&gt;)</returns>
        public async System.Threading.Tasks.Task<io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<List<FeatureConfig>>> GetFeatureConfigWithHttpInfoAsync(string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'environmentUUID' is set
            if (environmentUUID == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'environmentUUID' when calling ClientApi->GetFeatureConfig");


            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("environmentUUID", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(environmentUUID)); // path parameter
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FeatureConfig>>("/client/env/{environmentUUID}/feature-configs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeatureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get feature config 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the flag object in the API.</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>FeatureConfig</returns>
        public FeatureConfig GetFeatureConfigByIdentifier(string identifier, string environmentUUID, string cluster = default(string))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<FeatureConfig> localVarResponse = GetFeatureConfigByIdentifierWithHttpInfo(identifier, environmentUUID, cluster);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get feature config 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the flag object in the API.</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of FeatureConfig</returns>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<FeatureConfig> GetFeatureConfigByIdentifierWithHttpInfo(string identifier, string environmentUUID, string cluster = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'identifier' when calling ClientApi->GetFeatureConfigByIdentifier");

            // verify the required parameter 'environmentUUID' is set
            if (environmentUUID == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'environmentUUID' when calling ClientApi->GetFeatureConfigByIdentifier");

            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("identifier", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(identifier)); // path parameter
            localVarRequestOptions.PathParameters.Add("environmentUUID", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(environmentUUID)); // path parameter
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureConfig>("/client/env/{environmentUUID}/feature-configs/{identifier}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeatureConfigByIdentifier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get feature config 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the flag object in the API.</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureConfig</returns>
        public async System.Threading.Tasks.Task<FeatureConfig> GetFeatureConfigByIdentifierAsync(string identifier, string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<FeatureConfig> localVarResponse = await GetFeatureConfigByIdentifierWithHttpInfoAsync(identifier, environmentUUID, cluster, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get feature config 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the flag object in the API.</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API.</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureConfig)</returns>
        public async System.Threading.Tasks.Task<io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<FeatureConfig>> GetFeatureConfigByIdentifierWithHttpInfoAsync(string identifier, string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'identifier' when calling ClientApi->GetFeatureConfigByIdentifier");

            // verify the required parameter 'environmentUUID' is set
            if (environmentUUID == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'environmentUUID' when calling ClientApi->GetFeatureConfigByIdentifier");


            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("identifier", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(identifier)); // path parameter
            localVarRequestOptions.PathParameters.Add("environmentUUID", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(environmentUUID)); // path parameter
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureConfig>("/client/env/{environmentUUID}/feature-configs/{identifier}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeatureConfigByIdentifier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a segment by identifier Used to retrieve a segment for a certain account id by identifier
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the segment object in the API</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>Segment</returns>
        public Segment GetSegmentByIdentifier(string identifier, string environmentUUID, string cluster = default(string))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<Segment> localVarResponse = GetSegmentByIdentifierWithHttpInfo(identifier, environmentUUID, cluster);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a segment by identifier Used to retrieve a segment for a certain account id by identifier
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the segment object in the API</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of Segment</returns>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<Segment> GetSegmentByIdentifierWithHttpInfo(string identifier, string environmentUUID, string cluster = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'identifier' when calling ClientApi->GetSegmentByIdentifier");

            // verify the required parameter 'environmentUUID' is set
            if (environmentUUID == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'environmentUUID' when calling ClientApi->GetSegmentByIdentifier");

            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("identifier", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(identifier)); // path parameter
            localVarRequestOptions.PathParameters.Add("environmentUUID", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(environmentUUID)); // path parameter
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Segment>("/client/env/{environmentUUID}/target-segments/{identifier}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegmentByIdentifier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a segment by identifier Used to retrieve a segment for a certain account id by identifier
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the segment object in the API</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Segment</returns>
        public async System.Threading.Tasks.Task<Segment> GetSegmentByIdentifierAsync(string identifier, string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<Segment> localVarResponse = await GetSegmentByIdentifierWithHttpInfoAsync(identifier, environmentUUID, cluster, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a segment by identifier Used to retrieve a segment for a certain account id by identifier
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Unique identifier for the segment object in the API</param>
        /// <param name="environmentUUID">Unique identifier for the environment object in the API</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Segment)</returns>
        public async System.Threading.Tasks.Task<io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<Segment>> GetSegmentByIdentifierWithHttpInfoAsync(string identifier, string environmentUUID, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'identifier' when calling ClientApi->GetSegmentByIdentifier");

            // verify the required parameter 'environmentUUID' is set
            if (environmentUUID == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'environmentUUID' when calling ClientApi->GetSegmentByIdentifier");


            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("identifier", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(identifier)); // path parameter
            localVarRequestOptions.PathParameters.Add("environmentUUID", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(environmentUUID)); // path parameter
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Segment>("/client/env/{environmentUUID}/target-segments/{identifier}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegmentByIdentifier", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream endpoint. 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey"></param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns></returns>
        public void Stream(string aPIKey, string cluster = default(string))
        {
            StreamWithHttpInfo(aPIKey, cluster);
        }

        /// <summary>
        /// Stream endpoint. 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey"></param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<Object> StreamWithHttpInfo(string aPIKey, string cluster = default(string))
        {
            // verify the required parameter 'aPIKey' is set
            if (aPIKey == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'aPIKey' when calling ClientApi->Stream");

            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }
            localVarRequestOptions.HeaderParameters.Add("API-Key", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(aPIKey)); // header parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/stream", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Stream", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream endpoint. 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey"></param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamAsync(string aPIKey, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await StreamWithHttpInfoAsync(aPIKey, cluster, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Stream endpoint. 
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPIKey"></param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<Object>> StreamWithHttpInfoAsync(string aPIKey, string cluster = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aPIKey' is set
            if (aPIKey == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'aPIKey' when calling ClientApi->Stream");


            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }
            localVarRequestOptions.HeaderParameters.Add("API-Key", io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToString(aPIKey)); // header parameter

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/stream", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Stream", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
