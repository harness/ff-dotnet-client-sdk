/*
 * Harness feature flag service client apis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using io.harness.ff_dotnet_client_sdk.openapi.Client;
using io.harness.ff_dotnet_client_sdk.openapi.Model;

namespace io.harness.ff_dotnet_client_sdk.openapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IProxyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Endpoint that the Proxy can use to authenticate with the client server
        /// </summary>
        /// <remarks>
        /// Endpoint that the Proxy can use to authenticate with the client server
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateProxyKeyRequest"> (optional)</param>
        /// <returns>AuthenticationResponse</returns>
        AuthenticationResponse AuthenticateProxyKey(AuthenticateProxyKeyRequest authenticateProxyKeyRequest = default(AuthenticateProxyKeyRequest));

        /// <summary>
        /// Endpoint that the Proxy can use to authenticate with the client server
        /// </summary>
        /// <remarks>
        /// Endpoint that the Proxy can use to authenticate with the client server
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateProxyKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of AuthenticationResponse</returns>
        ApiResponse<AuthenticationResponse> AuthenticateProxyKeyWithHttpInfo(AuthenticateProxyKeyRequest authenticateProxyKeyRequest = default(AuthenticateProxyKeyRequest));
        /// <summary>
        /// Gets Proxy config for multiple environments
        /// </summary>
        /// <remarks>
        /// Gets Proxy config for multiple environments if the Key query param is provided or gets config for a single environment if an environment query param is provided
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Accpets a Proxy Key.</param>
        /// <param name="pageNumber">PageNumber (optional)</param>
        /// <param name="pageSize">PageSize (optional)</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="varEnvironment">Accepts an EnvironmentID. If this is provided then the endpoint will only return config for this environment. If this is left empty then the Proxy will return config for all environments associated with the Proxy Key. (optional)</param>
        /// <returns>ProxyConfig</returns>
        ProxyConfig GetProxyConfig(string key, int? pageNumber = default(int?), int? pageSize = default(int?), string cluster = default(string), string varEnvironment = default(string));

        /// <summary>
        /// Gets Proxy config for multiple environments
        /// </summary>
        /// <remarks>
        /// Gets Proxy config for multiple environments if the Key query param is provided or gets config for a single environment if an environment query param is provided
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Accpets a Proxy Key.</param>
        /// <param name="pageNumber">PageNumber (optional)</param>
        /// <param name="pageSize">PageSize (optional)</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="varEnvironment">Accepts an EnvironmentID. If this is provided then the endpoint will only return config for this environment. If this is left empty then the Proxy will return config for all environments associated with the Proxy Key. (optional)</param>
        /// <returns>ApiResponse of ProxyConfig</returns>
        ApiResponse<ProxyConfig> GetProxyConfigWithHttpInfo(string key, int? pageNumber = default(int?), int? pageSize = default(int?), string cluster = default(string), string varEnvironment = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IProxyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Endpoint that the Proxy can use to authenticate with the client server
        /// </summary>
        /// <remarks>
        /// Endpoint that the Proxy can use to authenticate with the client server
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateProxyKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationResponse</returns>
        System.Threading.Tasks.Task<AuthenticationResponse> AuthenticateProxyKeyAsync(AuthenticateProxyKeyRequest authenticateProxyKeyRequest = default(AuthenticateProxyKeyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint that the Proxy can use to authenticate with the client server
        /// </summary>
        /// <remarks>
        /// Endpoint that the Proxy can use to authenticate with the client server
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateProxyKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationResponse>> AuthenticateProxyKeyWithHttpInfoAsync(AuthenticateProxyKeyRequest authenticateProxyKeyRequest = default(AuthenticateProxyKeyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets Proxy config for multiple environments
        /// </summary>
        /// <remarks>
        /// Gets Proxy config for multiple environments if the Key query param is provided or gets config for a single environment if an environment query param is provided
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Accpets a Proxy Key.</param>
        /// <param name="pageNumber">PageNumber (optional)</param>
        /// <param name="pageSize">PageSize (optional)</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="varEnvironment">Accepts an EnvironmentID. If this is provided then the endpoint will only return config for this environment. If this is left empty then the Proxy will return config for all environments associated with the Proxy Key. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProxyConfig</returns>
        System.Threading.Tasks.Task<ProxyConfig> GetProxyConfigAsync(string key, int? pageNumber = default(int?), int? pageSize = default(int?), string cluster = default(string), string varEnvironment = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets Proxy config for multiple environments
        /// </summary>
        /// <remarks>
        /// Gets Proxy config for multiple environments if the Key query param is provided or gets config for a single environment if an environment query param is provided
        /// </remarks>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Accpets a Proxy Key.</param>
        /// <param name="pageNumber">PageNumber (optional)</param>
        /// <param name="pageSize">PageSize (optional)</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="varEnvironment">Accepts an EnvironmentID. If this is provided then the endpoint will only return config for this environment. If this is left empty then the Proxy will return config for all environments associated with the Proxy Key. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProxyConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProxyConfig>> GetProxyConfigWithHttpInfoAsync(string key, int? pageNumber = default(int?), int? pageSize = default(int?), string cluster = default(string), string varEnvironment = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IProxyApi : IProxyApiSync, IProxyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class ProxyApi : IDisposable, IProxyApi
    {
        private io.harness.ff_dotnet_client_sdk.openapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProxyApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ProxyApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProxyApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ProxyApi(string basePath)
        {
            this.Configuration = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.MergeConfigurations(
                io.harness.ff_dotnet_client_sdk.openapi.Client.GlobalConfiguration.Instance,
                new io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProxyApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ProxyApi(io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.MergeConfigurations(
                io.harness.ff_dotnet_client_sdk.openapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProxyApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProxyApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProxyApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProxyApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.MergeConfigurations(
                io.harness.ff_dotnet_client_sdk.openapi.Client.GlobalConfiguration.Instance,
                new io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProxyApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProxyApi(HttpClient client, io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.MergeConfigurations(
                io.harness.ff_dotnet_client_sdk.openapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProxyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ProxyApi(io.harness.ff_dotnet_client_sdk.openapi.Client.ISynchronousClient client, io.harness.ff_dotnet_client_sdk.openapi.Client.IAsynchronousClient asyncClient, io.harness.ff_dotnet_client_sdk.openapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = io.harness.ff_dotnet_client_sdk.openapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Endpoint that the Proxy can use to authenticate with the client server Endpoint that the Proxy can use to authenticate with the client server
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateProxyKeyRequest"> (optional)</param>
        /// <returns>AuthenticationResponse</returns>
        public AuthenticationResponse AuthenticateProxyKey(AuthenticateProxyKeyRequest authenticateProxyKeyRequest = default(AuthenticateProxyKeyRequest))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<AuthenticationResponse> localVarResponse = AuthenticateProxyKeyWithHttpInfo(authenticateProxyKeyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint that the Proxy can use to authenticate with the client server Endpoint that the Proxy can use to authenticate with the client server
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateProxyKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of AuthenticationResponse</returns>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<AuthenticationResponse> AuthenticateProxyKeyWithHttpInfo(AuthenticateProxyKeyRequest authenticateProxyKeyRequest = default(AuthenticateProxyKeyRequest))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authenticateProxyKeyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthenticationResponse>("/proxy/auth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthenticateProxyKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint that the Proxy can use to authenticate with the client server Endpoint that the Proxy can use to authenticate with the client server
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateProxyKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticationResponse> AuthenticateProxyKeyAsync(AuthenticateProxyKeyRequest authenticateProxyKeyRequest = default(AuthenticateProxyKeyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<AuthenticationResponse> localVarResponse = await AuthenticateProxyKeyWithHttpInfoAsync(authenticateProxyKeyRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint that the Proxy can use to authenticate with the client server Endpoint that the Proxy can use to authenticate with the client server
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateProxyKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationResponse)</returns>
        public async System.Threading.Tasks.Task<io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<AuthenticationResponse>> AuthenticateProxyKeyWithHttpInfoAsync(AuthenticateProxyKeyRequest authenticateProxyKeyRequest = default(AuthenticateProxyKeyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authenticateProxyKeyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthenticationResponse>("/proxy/auth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthenticateProxyKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets Proxy config for multiple environments Gets Proxy config for multiple environments if the Key query param is provided or gets config for a single environment if an environment query param is provided
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Accpets a Proxy Key.</param>
        /// <param name="pageNumber">PageNumber (optional)</param>
        /// <param name="pageSize">PageSize (optional)</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="varEnvironment">Accepts an EnvironmentID. If this is provided then the endpoint will only return config for this environment. If this is left empty then the Proxy will return config for all environments associated with the Proxy Key. (optional)</param>
        /// <returns>ProxyConfig</returns>
        public ProxyConfig GetProxyConfig(string key, int? pageNumber = default(int?), int? pageSize = default(int?), string cluster = default(string), string varEnvironment = default(string))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<ProxyConfig> localVarResponse = GetProxyConfigWithHttpInfo(key, pageNumber, pageSize, cluster, varEnvironment);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Proxy config for multiple environments Gets Proxy config for multiple environments if the Key query param is provided or gets config for a single environment if an environment query param is provided
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Accpets a Proxy Key.</param>
        /// <param name="pageNumber">PageNumber (optional)</param>
        /// <param name="pageSize">PageSize (optional)</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="varEnvironment">Accepts an EnvironmentID. If this is provided then the endpoint will only return config for this environment. If this is left empty then the Proxy will return config for all environments associated with the Proxy Key. (optional)</param>
        /// <returns>ApiResponse of ProxyConfig</returns>
        public io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<ProxyConfig> GetProxyConfigWithHttpInfo(string key, int? pageNumber = default(int?), int? pageSize = default(int?), string cluster = default(string), string varEnvironment = default(string))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'key' when calling ProxyApi->GetProxyConfig");

            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }
            if (varEnvironment != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "environment", varEnvironment));
            }
            localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "key", key));

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProxyConfig>("/proxy/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProxyConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets Proxy config for multiple environments Gets Proxy config for multiple environments if the Key query param is provided or gets config for a single environment if an environment query param is provided
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Accpets a Proxy Key.</param>
        /// <param name="pageNumber">PageNumber (optional)</param>
        /// <param name="pageSize">PageSize (optional)</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="varEnvironment">Accepts an EnvironmentID. If this is provided then the endpoint will only return config for this environment. If this is left empty then the Proxy will return config for all environments associated with the Proxy Key. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProxyConfig</returns>
        public async System.Threading.Tasks.Task<ProxyConfig> GetProxyConfigAsync(string key, int? pageNumber = default(int?), int? pageSize = default(int?), string cluster = default(string), string varEnvironment = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<ProxyConfig> localVarResponse = await GetProxyConfigWithHttpInfoAsync(key, pageNumber, pageSize, cluster, varEnvironment, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Proxy config for multiple environments Gets Proxy config for multiple environments if the Key query param is provided or gets config for a single environment if an environment query param is provided
        /// </summary>
        /// <exception cref="io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Accpets a Proxy Key.</param>
        /// <param name="pageNumber">PageNumber (optional)</param>
        /// <param name="pageSize">PageSize (optional)</param>
        /// <param name="cluster">Unique identifier for the cluster for the account (optional)</param>
        /// <param name="varEnvironment">Accepts an EnvironmentID. If this is provided then the endpoint will only return config for this environment. If this is left empty then the Proxy will return config for all environments associated with the Proxy Key. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProxyConfig)</returns>
        public async System.Threading.Tasks.Task<io.harness.ff_dotnet_client_sdk.openapi.Client.ApiResponse<ProxyConfig>> GetProxyConfigWithHttpInfoAsync(string key, int? pageNumber = default(int?), int? pageSize = default(int?), string cluster = default(string), string varEnvironment = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new io.harness.ff_dotnet_client_sdk.openapi.Client.ApiException(400, "Missing required parameter 'key' when calling ProxyApi->GetProxyConfig");


            io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions localVarRequestOptions = new io.harness.ff_dotnet_client_sdk.openapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (cluster != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "cluster", cluster));
            }
            if (varEnvironment != null)
            {
                localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "environment", varEnvironment));
            }
            localVarRequestOptions.QueryParameters.Add(io.harness.ff_dotnet_client_sdk.openapi.Client.ClientUtils.ParameterToMultiMap("", "key", key));

            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProxyConfig>("/proxy/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProxyConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
