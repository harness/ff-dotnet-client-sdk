/*
 * Harness feature flag service client apis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = io.harness.ff_dotnet_client_sdk.openapi.Client.FileParameter;
using OpenAPIDateConverter = io.harness.ff_dotnet_client_sdk.openapi.Client.OpenAPIDateConverter;

namespace io.harness.ff_dotnet_client_sdk.openapi.Model
{
    /// <summary>
    /// FeatureConfig
    /// </summary>
    [DataContract(Name = "FeatureConfig")]
    internal partial class FeatureConfig : IEquatable<FeatureConfig>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public FeatureState State { get; set; }
        /// <summary>
        /// Defines Kind
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        internal enum KindEnum
        {
            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean = 1,

            /// <summary>
            /// Enum Int for value: int
            /// </summary>
            [EnumMember(Value = "int")]
            Int = 2,

            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 3,

            /// <summary>
            /// Enum Json for value: json
            /// </summary>
            [EnumMember(Value = "json")]
            Json = 4
        }


        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name = "kind", IsRequired = true, EmitDefaultValue = true)]
        public KindEnum Kind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeatureConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureConfig" /> class.
        /// </summary>
        /// <param name="project">project (required).</param>
        /// <param name="varEnvironment">varEnvironment (required).</param>
        /// <param name="feature">feature (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="kind">kind (required).</param>
        /// <param name="variations">variations (required).</param>
        /// <param name="rules">rules.</param>
        /// <param name="defaultServe">defaultServe (required).</param>
        /// <param name="offVariation">offVariation (required).</param>
        /// <param name="prerequisites">prerequisites.</param>
        /// <param name="variationToTargetMap">variationToTargetMap.</param>
        /// <param name="varVersion">varVersion.</param>
        public FeatureConfig(string project = default(string), string varEnvironment = default(string), string feature = default(string), FeatureState state = default(FeatureState), KindEnum kind = default(KindEnum), List<Variation> variations = default(List<Variation>), List<ServingRule> rules = default(List<ServingRule>), Serve defaultServe = default(Serve), string offVariation = default(string), List<Prerequisite> prerequisites = default(List<Prerequisite>), List<VariationMap> variationToTargetMap = default(List<VariationMap>), long varVersion = default(long))
        {
            // to ensure "project" is required (not null)
            if (project == null)
            {
                throw new ArgumentNullException("project is a required property for FeatureConfig and cannot be null");
            }
            this.Project = project;
            // to ensure "varEnvironment" is required (not null)
            if (varEnvironment == null)
            {
                throw new ArgumentNullException("varEnvironment is a required property for FeatureConfig and cannot be null");
            }
            this.VarEnvironment = varEnvironment;
            // to ensure "feature" is required (not null)
            if (feature == null)
            {
                throw new ArgumentNullException("feature is a required property for FeatureConfig and cannot be null");
            }
            this.Feature = feature;
            this.State = state;
            this.Kind = kind;
            // to ensure "variations" is required (not null)
            if (variations == null)
            {
                throw new ArgumentNullException("variations is a required property for FeatureConfig and cannot be null");
            }
            this.Variations = variations;
            // to ensure "defaultServe" is required (not null)
            if (defaultServe == null)
            {
                throw new ArgumentNullException("defaultServe is a required property for FeatureConfig and cannot be null");
            }
            this.DefaultServe = defaultServe;
            // to ensure "offVariation" is required (not null)
            if (offVariation == null)
            {
                throw new ArgumentNullException("offVariation is a required property for FeatureConfig and cannot be null");
            }
            this.OffVariation = offVariation;
            this.Rules = rules;
            this.Prerequisites = prerequisites;
            this.VariationToTargetMap = variationToTargetMap;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name = "project", IsRequired = true, EmitDefaultValue = true)]
        public string Project { get; set; }

        /// <summary>
        /// Gets or Sets VarEnvironment
        /// </summary>
        [DataMember(Name = "environment", IsRequired = true, EmitDefaultValue = true)]
        public string VarEnvironment { get; set; }

        /// <summary>
        /// Gets or Sets Feature
        /// </summary>
        [DataMember(Name = "feature", IsRequired = true, EmitDefaultValue = true)]
        public string Feature { get; set; }

        /// <summary>
        /// Gets or Sets Variations
        /// </summary>
        [DataMember(Name = "variations", IsRequired = true, EmitDefaultValue = true)]
        public List<Variation> Variations { get; set; }

        /// <summary>
        /// Gets or Sets Rules
        /// </summary>
        [DataMember(Name = "rules", EmitDefaultValue = false)]
        public List<ServingRule> Rules { get; set; }

        /// <summary>
        /// Gets or Sets DefaultServe
        /// </summary>
        [DataMember(Name = "defaultServe", IsRequired = true, EmitDefaultValue = true)]
        public Serve DefaultServe { get; set; }

        /// <summary>
        /// Gets or Sets OffVariation
        /// </summary>
        [DataMember(Name = "offVariation", IsRequired = true, EmitDefaultValue = true)]
        public string OffVariation { get; set; }

        /// <summary>
        /// Gets or Sets Prerequisites
        /// </summary>
        [DataMember(Name = "prerequisites", EmitDefaultValue = false)]
        public List<Prerequisite> Prerequisites { get; set; }

        /// <summary>
        /// Gets or Sets VariationToTargetMap
        /// </summary>
        [DataMember(Name = "variationToTargetMap", EmitDefaultValue = false)]
        public List<VariationMap> VariationToTargetMap { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public long VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeatureConfig {\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  VarEnvironment: ").Append(VarEnvironment).Append("\n");
            sb.Append("  Feature: ").Append(Feature).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Variations: ").Append(Variations).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  DefaultServe: ").Append(DefaultServe).Append("\n");
            sb.Append("  OffVariation: ").Append(OffVariation).Append("\n");
            sb.Append("  Prerequisites: ").Append(Prerequisites).Append("\n");
            sb.Append("  VariationToTargetMap: ").Append(VariationToTargetMap).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureConfig);
        }

        /// <summary>
        /// Returns true if FeatureConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.VarEnvironment == input.VarEnvironment ||
                    (this.VarEnvironment != null &&
                    this.VarEnvironment.Equals(input.VarEnvironment))
                ) && 
                (
                    this.Feature == input.Feature ||
                    (this.Feature != null &&
                    this.Feature.Equals(input.Feature))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Kind == input.Kind ||
                    this.Kind.Equals(input.Kind)
                ) && 
                (
                    this.Variations == input.Variations ||
                    this.Variations != null &&
                    input.Variations != null &&
                    this.Variations.SequenceEqual(input.Variations)
                ) && 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    input.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                ) && 
                (
                    this.DefaultServe == input.DefaultServe ||
                    (this.DefaultServe != null &&
                    this.DefaultServe.Equals(input.DefaultServe))
                ) && 
                (
                    this.OffVariation == input.OffVariation ||
                    (this.OffVariation != null &&
                    this.OffVariation.Equals(input.OffVariation))
                ) && 
                (
                    this.Prerequisites == input.Prerequisites ||
                    this.Prerequisites != null &&
                    input.Prerequisites != null &&
                    this.Prerequisites.SequenceEqual(input.Prerequisites)
                ) && 
                (
                    this.VariationToTargetMap == input.VariationToTargetMap ||
                    this.VariationToTargetMap != null &&
                    input.VariationToTargetMap != null &&
                    this.VariationToTargetMap.SequenceEqual(input.VariationToTargetMap)
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Project != null)
                {
                    hashCode = (hashCode * 59) + this.Project.GetHashCode();
                }
                if (this.VarEnvironment != null)
                {
                    hashCode = (hashCode * 59) + this.VarEnvironment.GetHashCode();
                }
                if (this.Feature != null)
                {
                    hashCode = (hashCode * 59) + this.Feature.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                hashCode = (hashCode * 59) + this.Kind.GetHashCode();
                if (this.Variations != null)
                {
                    hashCode = (hashCode * 59) + this.Variations.GetHashCode();
                }
                if (this.Rules != null)
                {
                    hashCode = (hashCode * 59) + this.Rules.GetHashCode();
                }
                if (this.DefaultServe != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultServe.GetHashCode();
                }
                if (this.OffVariation != null)
                {
                    hashCode = (hashCode * 59) + this.OffVariation.GetHashCode();
                }
                if (this.Prerequisites != null)
                {
                    hashCode = (hashCode * 59) + this.Prerequisites.GetHashCode();
                }
                if (this.VariationToTargetMap != null)
                {
                    hashCode = (hashCode * 59) + this.VariationToTargetMap.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
