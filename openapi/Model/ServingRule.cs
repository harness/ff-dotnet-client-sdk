/*
 * Harness feature flag service client apis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = io.harness.ff_dotnet_client_sdk.openapi.Client.FileParameter;
using OpenAPIDateConverter = io.harness.ff_dotnet_client_sdk.openapi.Client.OpenAPIDateConverter;

namespace io.harness.ff_dotnet_client_sdk.openapi.Model
{
    /// <summary>
    /// The rule used to determine what variation to serve to a target
    /// </summary>
    [DataContract(Name = "ServingRule")]
    internal partial class ServingRule : IEquatable<ServingRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServingRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServingRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServingRule" /> class.
        /// </summary>
        /// <param name="ruleId">The unique identifier for this rule.</param>
        /// <param name="priority">The rules priority relative to other rules.  The rules are evaluated in order with 1 being the highest (required).</param>
        /// <param name="clauses">A list of clauses to use in the rule (required).</param>
        /// <param name="serve">serve (required).</param>
        public ServingRule(string ruleId = default(string), int priority = default(int), List<Clause> clauses = default(List<Clause>), Serve serve = default(Serve))
        {
            this.Priority = priority;
            // to ensure "clauses" is required (not null)
            if (clauses == null)
            {
                throw new ArgumentNullException("clauses is a required property for ServingRule and cannot be null");
            }
            this.Clauses = clauses;
            // to ensure "serve" is required (not null)
            if (serve == null)
            {
                throw new ArgumentNullException("serve is a required property for ServingRule and cannot be null");
            }
            this.Serve = serve;
            this.RuleId = ruleId;
        }

        /// <summary>
        /// The unique identifier for this rule
        /// </summary>
        /// <value>The unique identifier for this rule</value>
        [DataMember(Name = "ruleId", EmitDefaultValue = false)]
        public string RuleId { get; set; }

        /// <summary>
        /// The rules priority relative to other rules.  The rules are evaluated in order with 1 being the highest
        /// </summary>
        /// <value>The rules priority relative to other rules.  The rules are evaluated in order with 1 being the highest</value>
        /// <example>1</example>
        [DataMember(Name = "priority", IsRequired = true, EmitDefaultValue = true)]
        public int Priority { get; set; }

        /// <summary>
        /// A list of clauses to use in the rule
        /// </summary>
        /// <value>A list of clauses to use in the rule</value>
        [DataMember(Name = "clauses", IsRequired = true, EmitDefaultValue = true)]
        public List<Clause> Clauses { get; set; }

        /// <summary>
        /// Gets or Sets Serve
        /// </summary>
        [DataMember(Name = "serve", IsRequired = true, EmitDefaultValue = true)]
        public Serve Serve { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServingRule {\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Clauses: ").Append(Clauses).Append("\n");
            sb.Append("  Serve: ").Append(Serve).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServingRule);
        }

        /// <summary>
        /// Returns true if ServingRule instances are equal
        /// </summary>
        /// <param name="input">Instance of ServingRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServingRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.Clauses == input.Clauses ||
                    this.Clauses != null &&
                    input.Clauses != null &&
                    this.Clauses.SequenceEqual(input.Clauses)
                ) && 
                (
                    this.Serve == input.Serve ||
                    (this.Serve != null &&
                    this.Serve.Equals(input.Serve))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleId != null)
                {
                    hashCode = (hashCode * 59) + this.RuleId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                if (this.Clauses != null)
                {
                    hashCode = (hashCode * 59) + this.Clauses.GetHashCode();
                }
                if (this.Serve != null)
                {
                    hashCode = (hashCode * 59) + this.Serve.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
