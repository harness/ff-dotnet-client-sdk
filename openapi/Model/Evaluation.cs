/*
 * Harness feature flag service client apis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = io.harness.ff_dotnet_client_sdk.openapi.Client.FileParameter;
using OpenAPIDateConverter = io.harness.ff_dotnet_client_sdk.openapi.Client.OpenAPIDateConverter;

namespace io.harness.ff_dotnet_client_sdk.openapi.Model
{
    /// <summary>
    /// Evaluation
    /// </summary>
    [DataContract(Name = "Evaluation")]
    internal partial class Evaluation : IEquatable<Evaluation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Evaluation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Evaluation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Evaluation" /> class.
        /// </summary>
        /// <param name="flag">flag (required).</param>
        /// <param name="value">value (required).</param>
        /// <param name="kind">kind (required).</param>
        /// <param name="identifier">identifier.</param>
        public Evaluation(string flag = default(string), string value = default(string), string kind = default(string), string identifier = default(string))
        {
            // to ensure "flag" is required (not null)
            if (flag == null)
            {
                throw new ArgumentNullException("flag is a required property for Evaluation and cannot be null");
            }
            this.Flag = flag;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for Evaluation and cannot be null");
            }
            this.Value = value;
            // to ensure "kind" is required (not null)
            if (kind == null)
            {
                throw new ArgumentNullException("kind is a required property for Evaluation and cannot be null");
            }
            this.Kind = kind;
            this.Identifier = identifier;
        }

        /// <summary>
        /// Gets or Sets Flag
        /// </summary>
        [DataMember(Name = "flag", IsRequired = true, EmitDefaultValue = true)]
        public string Flag { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name = "kind", IsRequired = true, EmitDefaultValue = true)]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name = "identifier", EmitDefaultValue = false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Evaluation {\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Evaluation);
        }

        /// <summary>
        /// Returns true if Evaluation instances are equal
        /// </summary>
        /// <param name="input">Instance of Evaluation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Evaluation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Flag == input.Flag ||
                    (this.Flag != null &&
                    this.Flag.Equals(input.Flag))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Flag != null)
                {
                    hashCode = (hashCode * 59) + this.Flag.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.Kind != null)
                {
                    hashCode = (hashCode * 59) + this.Kind.GetHashCode();
                }
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
