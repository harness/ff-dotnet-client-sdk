/*
 * Harness feature flag service client apis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = io.harness.ff_dotnet_client_sdk.openapi.Client.FileParameter;
using OpenAPIDateConverter = io.harness.ff_dotnet_client_sdk.openapi.Client.OpenAPIDateConverter;

namespace io.harness.ff_dotnet_client_sdk.openapi.Model
{
    /// <summary>
    /// Feature Flag pre-requisites
    /// </summary>
    [DataContract(Name = "Prerequisite")]
    internal partial class Prerequisite : IEquatable<Prerequisite>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Prerequisite" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Prerequisite() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Prerequisite" /> class.
        /// </summary>
        /// <param name="feature">The feature identifier that is the prerequisite (required).</param>
        /// <param name="variations">A list of variations that must be met (required).</param>
        public Prerequisite(string feature = default(string), List<string> variations = default(List<string>))
        {
            // to ensure "feature" is required (not null)
            if (feature == null)
            {
                throw new ArgumentNullException("feature is a required property for Prerequisite and cannot be null");
            }
            this.Feature = feature;
            // to ensure "variations" is required (not null)
            if (variations == null)
            {
                throw new ArgumentNullException("variations is a required property for Prerequisite and cannot be null");
            }
            this.Variations = variations;
        }

        /// <summary>
        /// The feature identifier that is the prerequisite
        /// </summary>
        /// <value>The feature identifier that is the prerequisite</value>
        [DataMember(Name = "feature", IsRequired = true, EmitDefaultValue = true)]
        public string Feature { get; set; }

        /// <summary>
        /// A list of variations that must be met
        /// </summary>
        /// <value>A list of variations that must be met</value>
        [DataMember(Name = "variations", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Variations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Prerequisite {\n");
            sb.Append("  Feature: ").Append(Feature).Append("\n");
            sb.Append("  Variations: ").Append(Variations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Prerequisite);
        }

        /// <summary>
        /// Returns true if Prerequisite instances are equal
        /// </summary>
        /// <param name="input">Instance of Prerequisite to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Prerequisite input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Feature == input.Feature ||
                    (this.Feature != null &&
                    this.Feature.Equals(input.Feature))
                ) && 
                (
                    this.Variations == input.Variations ||
                    this.Variations != null &&
                    input.Variations != null &&
                    this.Variations.SequenceEqual(input.Variations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Feature != null)
                {
                    hashCode = (hashCode * 59) + this.Feature.GetHashCode();
                }
                if (this.Variations != null)
                {
                    hashCode = (hashCode * 59) + this.Variations.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
