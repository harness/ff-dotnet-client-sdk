/*
 * Harness feature flag service client apis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = io.harness.ff_dotnet_client_sdk.openapi.Client.FileParameter;
using OpenAPIDateConverter = io.harness.ff_dotnet_client_sdk.openapi.Client.OpenAPIDateConverter;

namespace io.harness.ff_dotnet_client_sdk.openapi.Model
{
    /// <summary>
    /// AuthenticationRequest
    /// </summary>
    [DataContract(Name = "AuthenticationRequest")]
    internal partial class AuthenticationRequest : IEquatable<AuthenticationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthenticationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationRequest" /> class.
        /// </summary>
        /// <param name="apiKey">apiKey (required).</param>
        /// <param name="target">target.</param>
        public AuthenticationRequest(string apiKey = default(string), AuthenticationRequestTarget target = default(AuthenticationRequestTarget))
        {
            // to ensure "apiKey" is required (not null)
            if (apiKey == null)
            {
                throw new ArgumentNullException("apiKey is a required property for AuthenticationRequest and cannot be null");
            }
            this.ApiKey = apiKey;
            this.Target = target;
        }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        /// <example>896045f3-42ee-4e73-9154-086644768b96</example>
        [DataMember(Name = "apiKey", IsRequired = true, EmitDefaultValue = true)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public AuthenticationRequestTarget Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthenticationRequest {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticationRequest);
        }

        /// <summary>
        /// Returns true if AuthenticationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.ApiKey.GetHashCode();
                }
                if (this.Target != null)
                {
                    hashCode = (hashCode * 59) + this.Target.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
