/*
 * Harness feature flag service client apis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = io.harness.ff_dotnet_client_sdk.openapi.Client.FileParameter;
using OpenAPIDateConverter = io.harness.ff_dotnet_client_sdk.openapi.Client.OpenAPIDateConverter;

namespace io.harness.ff_dotnet_client_sdk.openapi.Model
{
    /// <summary>
    /// A clause describes what conditions are used to evaluate a flag
    /// </summary>
    [DataContract(Name = "Clause")]
    internal partial class Clause : IEquatable<Clause>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Clause" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Clause() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Clause" /> class.
        /// </summary>
        /// <param name="id">The unique ID for the clause.</param>
        /// <param name="attribute">The attribute to use in the clause.  This can be any target attribute (required).</param>
        /// <param name="op">The type of operation such as equals, starts_with, contains (required).</param>
        /// <param name="values">The values that are compared against the operator (required).</param>
        /// <param name="negate">Is the operation negated? (required).</param>
        public Clause(string id = default(string), string attribute = default(string), string op = default(string), List<string> values = default(List<string>), bool negate = default(bool))
        {
            // to ensure "attribute" is required (not null)
            if (attribute == null)
            {
                throw new ArgumentNullException("attribute is a required property for Clause and cannot be null");
            }
            this.Attribute = attribute;
            // to ensure "op" is required (not null)
            if (op == null)
            {
                throw new ArgumentNullException("op is a required property for Clause and cannot be null");
            }
            this.Op = op;
            // to ensure "values" is required (not null)
            if (values == null)
            {
                throw new ArgumentNullException("values is a required property for Clause and cannot be null");
            }
            this.Values = values;
            this.Negate = negate;
            this.Id = id;
        }

        /// <summary>
        /// The unique ID for the clause
        /// </summary>
        /// <value>The unique ID for the clause</value>
        /// <example>32434243</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The attribute to use in the clause.  This can be any target attribute
        /// </summary>
        /// <value>The attribute to use in the clause.  This can be any target attribute</value>
        /// <example>identifier</example>
        [DataMember(Name = "attribute", IsRequired = true, EmitDefaultValue = true)]
        public string Attribute { get; set; }

        /// <summary>
        /// The type of operation such as equals, starts_with, contains
        /// </summary>
        /// <value>The type of operation such as equals, starts_with, contains</value>
        /// <example>starts_with</example>
        [DataMember(Name = "op", IsRequired = true, EmitDefaultValue = true)]
        public string Op { get; set; }

        /// <summary>
        /// The values that are compared against the operator
        /// </summary>
        /// <value>The values that are compared against the operator</value>
        [DataMember(Name = "values", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Values { get; set; }

        /// <summary>
        /// Is the operation negated?
        /// </summary>
        /// <value>Is the operation negated?</value>
        /// <example>false</example>
        [DataMember(Name = "negate", IsRequired = true, EmitDefaultValue = true)]
        public bool Negate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Clause {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Attribute: ").Append(Attribute).Append("\n");
            sb.Append("  Op: ").Append(Op).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Negate: ").Append(Negate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Clause);
        }

        /// <summary>
        /// Returns true if Clause instances are equal
        /// </summary>
        /// <param name="input">Instance of Clause to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Clause input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Attribute == input.Attribute ||
                    (this.Attribute != null &&
                    this.Attribute.Equals(input.Attribute))
                ) && 
                (
                    this.Op == input.Op ||
                    (this.Op != null &&
                    this.Op.Equals(input.Op))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.Negate == input.Negate ||
                    this.Negate.Equals(input.Negate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Attribute != null)
                {
                    hashCode = (hashCode * 59) + this.Attribute.GetHashCode();
                }
                if (this.Op != null)
                {
                    hashCode = (hashCode * 59) + this.Op.GetHashCode();
                }
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Negate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
