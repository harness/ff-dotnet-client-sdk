/*
 * Harness feature flag service client apis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = io.harness.ff_dotnet_client_sdk.openapi.Client.FileParameter;
using OpenAPIDateConverter = io.harness.ff_dotnet_client_sdk.openapi.Client.OpenAPIDateConverter;

namespace io.harness.ff_dotnet_client_sdk.openapi.Model
{
    /// <summary>
    /// A Target Group (Segment) response
    /// </summary>
    [DataContract(Name = "Segment")]
    internal partial class Segment : IEquatable<Segment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Segment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Segment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Segment" /> class.
        /// </summary>
        /// <param name="identifier">Unique identifier for the target group. (required).</param>
        /// <param name="name">Name of the target group. (required).</param>
        /// <param name="varEnvironment">The environment this target group belongs to.</param>
        /// <param name="tags">Tags for this target group.</param>
        /// <param name="included">A list of Targets who belong to this target group.</param>
        /// <param name="excluded">A list of Targets who are excluded from this target group.</param>
        /// <param name="rules">An array of rules that can cause a user to be included in this segment..</param>
        /// <param name="createdAt">The data and time in milliseconds when the group was created.</param>
        /// <param name="modifiedAt">The data and time in milliseconds when the group was last modified.</param>
        /// <param name="varVersion">The version of this group.  Each time it is modified the version is incremented.</param>
        public Segment(string identifier = default(string), string name = default(string), string varEnvironment = default(string), List<Tag> tags = default(List<Tag>), List<Target> included = default(List<Target>), List<Target> excluded = default(List<Target>), List<Clause> rules = default(List<Clause>), long createdAt = default(long), long modifiedAt = default(long), long varVersion = default(long))
        {
            // to ensure "identifier" is required (not null)
            if (identifier == null)
            {
                throw new ArgumentNullException("identifier is a required property for Segment and cannot be null");
            }
            this.Identifier = identifier;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Segment and cannot be null");
            }
            this.Name = name;
            this.VarEnvironment = varEnvironment;
            this.Tags = tags;
            this.Included = included;
            this.Excluded = excluded;
            this.Rules = rules;
            this.CreatedAt = createdAt;
            this.ModifiedAt = modifiedAt;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Unique identifier for the target group.
        /// </summary>
        /// <value>Unique identifier for the target group.</value>
        [DataMember(Name = "identifier", IsRequired = true, EmitDefaultValue = true)]
        public string Identifier { get; set; }

        /// <summary>
        /// Name of the target group.
        /// </summary>
        /// <value>Name of the target group.</value>
        /// <example>Beta Testers</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The environment this target group belongs to
        /// </summary>
        /// <value>The environment this target group belongs to</value>
        /// <example>Production</example>
        [DataMember(Name = "environment", EmitDefaultValue = false)]
        public string VarEnvironment { get; set; }

        /// <summary>
        /// Tags for this target group
        /// </summary>
        /// <value>Tags for this target group</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<Tag> Tags { get; set; }

        /// <summary>
        /// A list of Targets who belong to this target group
        /// </summary>
        /// <value>A list of Targets who belong to this target group</value>
        [DataMember(Name = "included", EmitDefaultValue = false)]
        public List<Target> Included { get; set; }

        /// <summary>
        /// A list of Targets who are excluded from this target group
        /// </summary>
        /// <value>A list of Targets who are excluded from this target group</value>
        [DataMember(Name = "excluded", EmitDefaultValue = false)]
        public List<Target> Excluded { get; set; }

        /// <summary>
        /// An array of rules that can cause a user to be included in this segment.
        /// </summary>
        /// <value>An array of rules that can cause a user to be included in this segment.</value>
        [DataMember(Name = "rules", EmitDefaultValue = false)]
        public List<Clause> Rules { get; set; }

        /// <summary>
        /// The data and time in milliseconds when the group was created
        /// </summary>
        /// <value>The data and time in milliseconds when the group was created</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// The data and time in milliseconds when the group was last modified
        /// </summary>
        /// <value>The data and time in milliseconds when the group was last modified</value>
        [DataMember(Name = "modifiedAt", EmitDefaultValue = false)]
        public long ModifiedAt { get; set; }

        /// <summary>
        /// The version of this group.  Each time it is modified the version is incremented
        /// </summary>
        /// <value>The version of this group.  Each time it is modified the version is incremented</value>
        /// <example>1</example>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public long VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Segment {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarEnvironment: ").Append(VarEnvironment).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Included: ").Append(Included).Append("\n");
            sb.Append("  Excluded: ").Append(Excluded).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Segment);
        }

        /// <summary>
        /// Returns true if Segment instances are equal
        /// </summary>
        /// <param name="input">Instance of Segment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Segment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.VarEnvironment == input.VarEnvironment ||
                    (this.VarEnvironment != null &&
                    this.VarEnvironment.Equals(input.VarEnvironment))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Included == input.Included ||
                    this.Included != null &&
                    input.Included != null &&
                    this.Included.SequenceEqual(input.Included)
                ) && 
                (
                    this.Excluded == input.Excluded ||
                    this.Excluded != null &&
                    input.Excluded != null &&
                    this.Excluded.SequenceEqual(input.Excluded)
                ) && 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    input.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    this.ModifiedAt.Equals(input.ModifiedAt)
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.VarEnvironment != null)
                {
                    hashCode = (hashCode * 59) + this.VarEnvironment.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.Included != null)
                {
                    hashCode = (hashCode * 59) + this.Included.GetHashCode();
                }
                if (this.Excluded != null)
                {
                    hashCode = (hashCode * 59) + this.Excluded.GetHashCode();
                }
                if (this.Rules != null)
                {
                    hashCode = (hashCode * 59) + this.Rules.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifiedAt.GetHashCode();
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
