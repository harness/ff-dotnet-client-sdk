/*
 * Harness feature flag service client apis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = io.harness.ff_dotnet_client_sdk.openapi.Client.FileParameter;
using OpenAPIDateConverter = io.harness.ff_dotnet_client_sdk.openapi.Client.OpenAPIDateConverter;

namespace io.harness.ff_dotnet_client_sdk.openapi.Model
{
    /// <summary>
    /// ProxyConfigAllOfEnvironments
    /// </summary>
    [DataContract(Name = "ProxyConfig_allOf_environments")]
    internal partial class ProxyConfigAllOfEnvironments : IEquatable<ProxyConfigAllOfEnvironments>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProxyConfigAllOfEnvironments" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="apiKeys">apiKeys.</param>
        /// <param name="featureConfigs">featureConfigs.</param>
        /// <param name="segments">segments.</param>
        public ProxyConfigAllOfEnvironments(string id = default(string), List<string> apiKeys = default(List<string>), List<FeatureConfig> featureConfigs = default(List<FeatureConfig>), List<Segment> segments = default(List<Segment>))
        {
            this.Id = id;
            this.ApiKeys = apiKeys;
            this.FeatureConfigs = featureConfigs;
            this.Segments = segments;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ApiKeys
        /// </summary>
        [DataMember(Name = "apiKeys", EmitDefaultValue = false)]
        public List<string> ApiKeys { get; set; }

        /// <summary>
        /// Gets or Sets FeatureConfigs
        /// </summary>
        [DataMember(Name = "featureConfigs", EmitDefaultValue = false)]
        public List<FeatureConfig> FeatureConfigs { get; set; }

        /// <summary>
        /// Gets or Sets Segments
        /// </summary>
        [DataMember(Name = "segments", EmitDefaultValue = false)]
        public List<Segment> Segments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProxyConfigAllOfEnvironments {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApiKeys: ").Append(ApiKeys).Append("\n");
            sb.Append("  FeatureConfigs: ").Append(FeatureConfigs).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProxyConfigAllOfEnvironments);
        }

        /// <summary>
        /// Returns true if ProxyConfigAllOfEnvironments instances are equal
        /// </summary>
        /// <param name="input">Instance of ProxyConfigAllOfEnvironments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProxyConfigAllOfEnvironments input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ApiKeys == input.ApiKeys ||
                    this.ApiKeys != null &&
                    input.ApiKeys != null &&
                    this.ApiKeys.SequenceEqual(input.ApiKeys)
                ) && 
                (
                    this.FeatureConfigs == input.FeatureConfigs ||
                    this.FeatureConfigs != null &&
                    input.FeatureConfigs != null &&
                    this.FeatureConfigs.SequenceEqual(input.FeatureConfigs)
                ) && 
                (
                    this.Segments == input.Segments ||
                    this.Segments != null &&
                    input.Segments != null &&
                    this.Segments.SequenceEqual(input.Segments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ApiKeys != null)
                {
                    hashCode = (hashCode * 59) + this.ApiKeys.GetHashCode();
                }
                if (this.FeatureConfigs != null)
                {
                    hashCode = (hashCode * 59) + this.FeatureConfigs.GetHashCode();
                }
                if (this.Segments != null)
                {
                    hashCode = (hashCode * 59) + this.Segments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
