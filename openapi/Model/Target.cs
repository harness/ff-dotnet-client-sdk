/*
 * Harness feature flag service client apis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = io.harness.ff_dotnet_client_sdk.openapi.Client.FileParameter;
using OpenAPIDateConverter = io.harness.ff_dotnet_client_sdk.openapi.Client.OpenAPIDateConverter;

namespace io.harness.ff_dotnet_client_sdk.openapi.Model
{
    /// <summary>
    /// A Target object
    /// </summary>
    [DataContract(Name = "Target")]
    internal partial class Target : IEquatable<Target>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Target" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Target() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Target" /> class.
        /// </summary>
        /// <param name="identifier">The unique identifier for this target (required).</param>
        /// <param name="account">The account ID that the target belongs to (required).</param>
        /// <param name="org">The identifier for the organization that the target belongs to (required).</param>
        /// <param name="varEnvironment">The identifier for the environment that the target belongs to (required).</param>
        /// <param name="project">The identifier for the project that this target belongs to (required).</param>
        /// <param name="name">The name of this Target (required).</param>
        /// <param name="anonymous">Indicates if this target is anonymous.</param>
        /// <param name="attributes">a JSON representation of the attributes for this target.</param>
        /// <param name="createdAt">The date and time in milliseconds when this Target was created.</param>
        /// <param name="segments">A list of Target Groups (Segments) that this Target belongs to.</param>
        public Target(string identifier = default(string), string account = default(string), string org = default(string), string varEnvironment = default(string), string project = default(string), string name = default(string), bool anonymous = default(bool), Object attributes = default(Object), long createdAt = default(long), List<Segment> segments = default(List<Segment>))
        {
            // to ensure "identifier" is required (not null)
            if (identifier == null)
            {
                throw new ArgumentNullException("identifier is a required property for Target and cannot be null");
            }
            this.Identifier = identifier;
            // to ensure "account" is required (not null)
            if (account == null)
            {
                throw new ArgumentNullException("account is a required property for Target and cannot be null");
            }
            this.Account = account;
            // to ensure "org" is required (not null)
            if (org == null)
            {
                throw new ArgumentNullException("org is a required property for Target and cannot be null");
            }
            this.Org = org;
            // to ensure "varEnvironment" is required (not null)
            if (varEnvironment == null)
            {
                throw new ArgumentNullException("varEnvironment is a required property for Target and cannot be null");
            }
            this.VarEnvironment = varEnvironment;
            // to ensure "project" is required (not null)
            if (project == null)
            {
                throw new ArgumentNullException("project is a required property for Target and cannot be null");
            }
            this.Project = project;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Target and cannot be null");
            }
            this.Name = name;
            this.Anonymous = anonymous;
            this.Attributes = attributes;
            this.CreatedAt = createdAt;
            this.Segments = segments;
        }

        /// <summary>
        /// The unique identifier for this target
        /// </summary>
        /// <value>The unique identifier for this target</value>
        /// <example>john-doe</example>
        [DataMember(Name = "identifier", IsRequired = true, EmitDefaultValue = true)]
        public string Identifier { get; set; }

        /// <summary>
        /// The account ID that the target belongs to
        /// </summary>
        /// <value>The account ID that the target belongs to</value>
        /// <example>abcXDdffdaffd</example>
        [DataMember(Name = "account", IsRequired = true, EmitDefaultValue = true)]
        public string Account { get; set; }

        /// <summary>
        /// The identifier for the organization that the target belongs to
        /// </summary>
        /// <value>The identifier for the organization that the target belongs to</value>
        [DataMember(Name = "org", IsRequired = true, EmitDefaultValue = true)]
        public string Org { get; set; }

        /// <summary>
        /// The identifier for the environment that the target belongs to
        /// </summary>
        /// <value>The identifier for the environment that the target belongs to</value>
        [DataMember(Name = "environment", IsRequired = true, EmitDefaultValue = true)]
        public string VarEnvironment { get; set; }

        /// <summary>
        /// The identifier for the project that this target belongs to
        /// </summary>
        /// <value>The identifier for the project that this target belongs to</value>
        [DataMember(Name = "project", IsRequired = true, EmitDefaultValue = true)]
        public string Project { get; set; }

        /// <summary>
        /// The name of this Target
        /// </summary>
        /// <value>The name of this Target</value>
        /// <example>John Doe</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if this target is anonymous
        /// </summary>
        /// <value>Indicates if this target is anonymous</value>
        [DataMember(Name = "anonymous", EmitDefaultValue = true)]
        public bool Anonymous { get; set; }

        /// <summary>
        /// a JSON representation of the attributes for this target
        /// </summary>
        /// <value>a JSON representation of the attributes for this target</value>
        /// <example>{&quot;age&quot;:20,&quot;location&quot;:&quot;Belfast&quot;}</example>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Object Attributes { get; set; }

        /// <summary>
        /// The date and time in milliseconds when this Target was created
        /// </summary>
        /// <value>The date and time in milliseconds when this Target was created</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// A list of Target Groups (Segments) that this Target belongs to
        /// </summary>
        /// <value>A list of Target Groups (Segments) that this Target belongs to</value>
        [DataMember(Name = "segments", EmitDefaultValue = false)]
        public List<Segment> Segments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Target {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Org: ").Append(Org).Append("\n");
            sb.Append("  VarEnvironment: ").Append(VarEnvironment).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Anonymous: ").Append(Anonymous).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Target);
        }

        /// <summary>
        /// Returns true if Target instances are equal
        /// </summary>
        /// <param name="input">Instance of Target to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Target input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Org == input.Org ||
                    (this.Org != null &&
                    this.Org.Equals(input.Org))
                ) && 
                (
                    this.VarEnvironment == input.VarEnvironment ||
                    (this.VarEnvironment != null &&
                    this.VarEnvironment.Equals(input.VarEnvironment))
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Anonymous == input.Anonymous ||
                    this.Anonymous.Equals(input.Anonymous)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) && 
                (
                    this.Segments == input.Segments ||
                    this.Segments != null &&
                    input.Segments != null &&
                    this.Segments.SequenceEqual(input.Segments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                if (this.Org != null)
                {
                    hashCode = (hashCode * 59) + this.Org.GetHashCode();
                }
                if (this.VarEnvironment != null)
                {
                    hashCode = (hashCode * 59) + this.VarEnvironment.GetHashCode();
                }
                if (this.Project != null)
                {
                    hashCode = (hashCode * 59) + this.Project.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Anonymous.GetHashCode();
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                if (this.Segments != null)
                {
                    hashCode = (hashCode * 59) + this.Segments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
