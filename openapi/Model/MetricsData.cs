/*
 * Harness feature flag service client apis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = io.harness.ff_dotnet_client_sdk.openapi.Client.FileParameter;
using OpenAPIDateConverter = io.harness.ff_dotnet_client_sdk.openapi.Client.OpenAPIDateConverter;

namespace io.harness.ff_dotnet_client_sdk.openapi.Model
{
    /// <summary>
    /// MetricsData
    /// </summary>
    [DataContract(Name = "MetricsData")]
    internal partial class MetricsData : IEquatable<MetricsData>, IValidatableObject
    {
        /// <summary>
        /// This can be of type FeatureMetrics
        /// </summary>
        /// <value>This can be of type FeatureMetrics</value>
        [JsonConverter(typeof(StringEnumConverter))]
        internal enum MetricsTypeEnum
        {
            /// <summary>
            /// Enum FFMETRICS for value: FFMETRICS
            /// </summary>
            [EnumMember(Value = "FFMETRICS")]
            FFMETRICS = 1
        }


        /// <summary>
        /// This can be of type FeatureMetrics
        /// </summary>
        /// <value>This can be of type FeatureMetrics</value>
        [DataMember(Name = "metricsType", IsRequired = true, EmitDefaultValue = true)]
        public MetricsTypeEnum MetricsType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MetricsData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsData" /> class.
        /// </summary>
        /// <param name="timestamp">time at when this data was recorded (required).</param>
        /// <param name="count">count (required).</param>
        /// <param name="metricsType">This can be of type FeatureMetrics (required).</param>
        /// <param name="attributes">attributes (required).</param>
        public MetricsData(long timestamp = default(long), int count = default(int), MetricsTypeEnum metricsType = default(MetricsTypeEnum), List<KeyValue> attributes = default(List<KeyValue>))
        {
            this.Timestamp = timestamp;
            this.Count = count;
            this.MetricsType = metricsType;
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new ArgumentNullException("attributes is a required property for MetricsData and cannot be null");
            }
            this.Attributes = attributes;
        }

        /// <summary>
        /// time at when this data was recorded
        /// </summary>
        /// <value>time at when this data was recorded</value>
        /// <example>1608175465</example>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public long Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", IsRequired = true, EmitDefaultValue = true)]
        public List<KeyValue> Attributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetricsData {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  MetricsType: ").Append(MetricsType).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetricsData);
        }

        /// <summary>
        /// Returns true if MetricsData instances are equal
        /// </summary>
        /// <param name="input">Instance of MetricsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetricsData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.MetricsType == input.MetricsType ||
                    this.MetricsType.Equals(input.MetricsType)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                hashCode = (hashCode * 59) + this.MetricsType.GetHashCode();
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
