/*
 * Harness feature flag service client apis
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = io.harness.ff_dotnet_client_sdk.openapi.Client.FileParameter;
using OpenAPIDateConverter = io.harness.ff_dotnet_client_sdk.openapi.Client.OpenAPIDateConverter;

namespace io.harness.ff_dotnet_client_sdk.openapi.Model
{
    /// <summary>
    /// Metrics
    /// </summary>
    [DataContract(Name = "Metrics")]
    internal partial class Metrics : IEquatable<Metrics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Metrics" /> class.
        /// </summary>
        /// <param name="targetData">targetData.</param>
        /// <param name="metricsData">metricsData.</param>
        public Metrics(List<TargetData> targetData = default(List<TargetData>), List<MetricsData> metricsData = default(List<MetricsData>))
        {
            this.TargetData = targetData;
            this.MetricsData = metricsData;
        }

        /// <summary>
        /// Gets or Sets TargetData
        /// </summary>
        [DataMember(Name = "targetData", EmitDefaultValue = false)]
        public List<TargetData> TargetData { get; set; }

        /// <summary>
        /// Gets or Sets MetricsData
        /// </summary>
        [DataMember(Name = "metricsData", EmitDefaultValue = false)]
        public List<MetricsData> MetricsData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Metrics {\n");
            sb.Append("  TargetData: ").Append(TargetData).Append("\n");
            sb.Append("  MetricsData: ").Append(MetricsData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Metrics);
        }

        /// <summary>
        /// Returns true if Metrics instances are equal
        /// </summary>
        /// <param name="input">Instance of Metrics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Metrics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TargetData == input.TargetData ||
                    this.TargetData != null &&
                    input.TargetData != null &&
                    this.TargetData.SequenceEqual(input.TargetData)
                ) && 
                (
                    this.MetricsData == input.MetricsData ||
                    this.MetricsData != null &&
                    input.MetricsData != null &&
                    this.MetricsData.SequenceEqual(input.MetricsData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TargetData != null)
                {
                    hashCode = (hashCode * 59) + this.TargetData.GetHashCode();
                }
                if (this.MetricsData != null)
                {
                    hashCode = (hashCode * 59) + this.MetricsData.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
